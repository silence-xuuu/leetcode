/*
你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。
假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。
你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。

示例:
给定 n = 5，并且 version = 4 是第一个错误的版本。
调用 isBadVersion(3) -> false
调用 isBadVersion(5) -> true
调用 isBadVersion(4) -> true
所以，4 是第一个错误的版本。 
*/

// Forward declaration of isBadVersion API.
bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        long l = 1 , r = n;
        while(l<r){                         //二分查找
            long mid = (r+l)/2;
            if(isBadVersion(mid)) r=mid;
            else l=mid+1;
        }
        return r;
    }
};

/*
0ms 100%

思路：二分查找

思考感悟：
1、此题最大的难度在于读懂题目，读懂之后就很简单了。
2、简单的二分查找，不同在于题目是要找到二分的起始点。
*/
