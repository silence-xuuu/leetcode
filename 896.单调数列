bool isMonotonic(int* A, int ASize){
    if(ASize<=2) return true;
    if(A[0]<=A[ASize-1]){
        for(int i=0;i<ASize-1;i++){
            if(A[i]>A[i+1]) return false;
        }
    }
    else for(int i=0;i<ASize-1;i++){
            if(A[i]<A[i+1]) return false;
        }
    return true;
}

//92ms 96.43%
//10.7mb 68.33%

//思路：
//先判断头元素和尾元素的大小关系，通过一次遍历判断每个元素与后一个元素的大小关系，若与头尾元素的大小关系不一致则返回false。

/*bool isMonotonic(int* A, int ASize) {
    int up=1,down=1;
    for(int i=0;i<ASize-1;i++){
        if(A[i]>=A[i+1])
            down++;
        if(A[i]<=A[i+1])
            up++;
    }
    if(up==ASize||down==ASize)
        return true;
    else
        return false;
}*/

//思路：
//一次遍历，分别给前后元素的小于等于和大于等于的次数计数，遍历完成后比较两种次数与元素总个数的大小关系。

//思考感悟：
//与原方法的时间和占用空间相差不大。
//优点：引用新的变量记录相邻大小关系值，思路更加轻巧简便。相比第一种方法减少了第一遍遍历寻找最值的过程。
//缺点：原方法在遇到不符合条件的数值时可以直接返回弹出，此方法必须经过整次遍历，在特殊情况时所用的时间会更多。

//运用了之前讲到方法中的相邻比较法，可以减少再次存储和重复遍历所用的时间。
//相邻比较法的进阶模式：相邻比较+大小关系计数，更加简单奇巧的方法。
