/*
给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，使得从 1 到 n 的 min(ai, bi) 总和最大。
返回该 最大总和 。 

示例 1：
输入：nums = [1,4,3,2]
输出：4
解释：所有可能的分法（忽略元素顺序）为：
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
所以最大总和为 4
*/

class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int sum=0;
        for(int i=0;i<nums.size();i++){
            if(i%2==0) sum+=nums[i];
        }
        return sum;
    }
};

/*
52ms 100%

思路：贪心，排序后累加所有在偶数位的数字之和并返回。

思考感悟：
1、此题的贪心算法可以用归纳和反证简单证明。
2、由于数对是两个一组，所以选取的偶数位，多个数字一组时同样可以使用这种方法。
3、同样是计算最大值，最简单的方法永远是贪心。（在不需要给出严谨证明的情况下）
*/
