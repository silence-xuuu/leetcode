/*
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器。

示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
*/

class Solution {
public:
    int maxArea(vector<int>& height) {
        int i=0,j=height.size()-1,Max=0;
        while(i<j){
            Max=max(Max,min(height[i],height[j])*(j-i));
            if(height[i]>height[j]) j--;
            else i++;
        }
        return Max;
    }
};

/*
20ms 99%

思路：动态规划+贪心。

思考感悟：
1、动态规划判断递归式，贪心的主要思路。
2、此题主要在于题意的理解，利用双指针和贪心找出每一次的容纳量，再动态规划得出结果。
*/
