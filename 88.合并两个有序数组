/*
给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。

说明:
初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
*/

void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){
    int i=0,j=0,k=0;
    for(i=m-1;i>=0;i--){
        nums1[i+n]=nums1[i];
    } 
    for(i = n;i<m+n && j<n;){
        if(nums1[i] <= nums2[j]){
            nums1[k] = nums1[i];
            k++;
            i++;
        }
        else{
            nums1[k] = nums2[j];
            k++;
            j++;
        }
    }
    while(j<n) nums1[k++] = nums2[j++];
    return nums1;
}

/*
4ms 94.74%
7.3mb 62.95%

思路：
将nums1数组向后移动n个位置后通过每个的对比将nums1重新填充。

思考感悟：
1、本题的正常解决思路都是逐个比较填充法。（第一反应是将nums2与nums1先整合再直接sort最后sort格式麻烦作罢）
2、提高速度的方法还有将12分别排序后使用memcpy函数。
3、此类题型尽量使用一遍遍历的方法（不到一遍也行）限制自己程序的运行时间，大多遍历一遍的方法时间都相差不大。
*/
