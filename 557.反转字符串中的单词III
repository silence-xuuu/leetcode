/*
给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。

示例 1:

输入: "Let's take LeetCode contest"
输出: "s'teL ekat edoCteeL tsetnoc" 
*/

void reverse(char str[],int left,int right){
    char temp;
    while(left<right){
            temp=str[left];
            str[left]=str[right];
            str[right]=temp;
            left++;
            right--;
        }
}
char * reverseWords(char * s){
    int len=strlen(s),i=0,j=0,count=0;
    for(i=0;i<=len;i++){
        if(s[i]!=' ') count++;
        if(s[i]==' ' || s[i]=='\0'){
            reverse(s,j,i-1);
            j=i+1;
            count=0;
        }
    }
    return s;
}

/*
8ms 91.60%

思路：
一次遍历，计数到下一个空格前的个数，引用函数翻转。

思考感悟：
1、这系列的三道题主要都是运用了交换顺序的子函数，此题的难点在于单词的划分。
2、单词划分最常使用的是判断空格法，此题由于需要判断单词长度，所以引用新变量计算并在下标未变前完成翻转。
3、在这里使用for语句会比使用while简便许多并有效避免数组溢出，但需要注意重置下标。
*/
