/*
给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。

示例 1:
输入: candies = [1,1,2,2,3,3]
输出: 3
解析: 一共有三种种类的糖果，每一种都有两个。
     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。
*/

class Solution {
public:
    int distributeCandies(vector<int>& candyType) {
        sort(candyType.begin(),candyType.end());          //排序
        int count=0,i=0;
        for(int i=0;i<candyType.size()-1;i++){
            if(candyType[i]!=candyType[i+1]) count++;                   //判断种类个数
            if(count>=candyType.size()/2) return candyType.size()/2;    //种类大于一半后直接返回
        }
        return count+1;
    }
};

/*
200ms 100%

思路：贪心。
排序后，每个不同种类的给妹妹一个，若个数先达到阈值则返回种类数，若全部遍历完则返回计数种类数。

思考感悟：
1、最大种类数问题，首先想到贪心算法。
2、在进行遍历的计数时，刚开始想的是使用while和+2，后来两侧的值需要额外使用语句，较为复杂，改成用for循环和不等判断。
3、此题的本质是在于判断两个阈值谁先达到，在算法题中出现次数较多。
*/
