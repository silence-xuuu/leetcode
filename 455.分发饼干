/*
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

 
示例 1:

输入: g = [1,2,3], s = [1,1]
输出: 1
解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
*/

class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
        sort(g.begin(),g.end());
        sort(s.begin(),s.end());
        int number=0,m=0,n=0;
        while(m<g.size() && n<s.size()){
            if(s[n]>=g[m]){
                number++;
                m++;
                n++;
            }
            else n++;
        }
        return number;
    }
};

/*
44ms 99%

思路：贪心
首先将胃口值和饼干大小排序，贪心满足最多的小胃口孩子。

思考感悟：
1、贪心算法使用前需要先证明正确性，此题可以用反证法简单证明。
2、对于涉及到满足最大最小问题时，最简单的算法思想一般都是贪心，但注意正确性。
3、贪心方法想出后，此题的代码编写并不困难。
*/
