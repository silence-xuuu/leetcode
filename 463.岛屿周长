/*
给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。
网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。
岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。
*/

int islandPerimeter(int** grid, int gridSize, int* gridColSize){
    int count=0,i,j;
    for(i = 0; i < gridSize; i++){
        for(j = 0; j < * gridColSize; j++){
            if(grid[i][j]==1){
                if(i==0 ) count++;
                if(i==gridSize-1)count++;
                if(j==0) count++;
                if(j==*gridColSize-1)count++;
                if(i>0 && grid[i-1][j]==0 ) count++;
                if(i<gridSize-1 && grid[i+1][j]==0 ) count++;
                if(j>0 && grid[i][j-1]==0) count++;
                if(j<*gridColSize-1 && grid[i][j+1]==0) count++;  
            } 
        }
    }
    return count;      
}

/*
8ms 97.69%

思路：
遍历所有元素，当值为1时判断在四周时加一，在中间时四周少一个元素加一。

思考感悟：
1、此题的重点在于特殊情况的考虑，当方块在四周时情况特殊需要另外考虑。
2、此题同样需要注意数组的越界问题，最后一列的下标元素容易弄混。
3、还有另外的方法是先加四，判断前列和前行有元素则减二，有效避免数组越界，但速度上改进不大。
*/
