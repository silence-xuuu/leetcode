/*
假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。
给你一个整数数组  flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false。 

示例 1：
输入：flowerbed = [1,0,0,0,1], n = 1
输出：true

示例 2：
输入：flowerbed = [1,0,0,0,1], n = 2
输出：false
*/

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int i=1;
        flowerbed.insert(flowerbed.begin(), 0);        //数组前后插入零
        flowerbed.insert(flowerbed.end(), 0);
        while(i<flowerbed.size()-1){
            if(flowerbed[i-1]==0 && flowerbed[i]==0 && flowerbed[i+1]==0){
                flowerbed[i]=1; 
                n--;                                 //判断有三个连续零则计数
            }
            i++;
        }
        return n<=0;
    }
};

/*
28ms 96%

思路：收尾插零，有连续零时种花并置1计数，判断是否能全部种完。

思考感悟：
1、本题巧妙的点在于在前后加零，减少分别判断两次的复杂代码。
2、在判断能否种花时，需要判断连续三个，为保证两边都有剩余，并将种花位改变状态。
3、在类似有头尾特殊状况的情况中，都可以考虑在头尾添加元素，将整个数组变为统一的判断方式。

*/
