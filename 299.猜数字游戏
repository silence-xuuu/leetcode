/*
你正在和你的朋友玩 猜数字（Bulls and Cows）游戏：你写下一个数字让你的朋友猜。
每次他猜测后，你给他一个提示，告诉他有多少位数字和确切位置都猜对了（称为“Bulls”, 公牛），有多少位数字猜对了但是位置不对（称为“Cows”, 奶牛）。
你的朋友将会根据提示继续猜，直到猜出秘密数字。
请写出一个根据秘密数字和朋友的猜测数返回提示的函数，用 A 表示公牛，用 B 表示奶牛。
请注意秘密数字和朋友的猜测数都可能含有重复数字。

示例 1:
输入: secret = "1807", guess = "7810"
输出: "1A3B"
解释: 1 公牛和 3 奶牛。公牛是 8，奶牛是 0, 1 和 7。
*/

class Solution {
public:
    string getHint(string secret, string guess) {
    int count1[10]={0},count2[10]={0},i,A=0,B=0;
    char *result="0A0B";
    for (i = 0; i<secret.size(); i++){
        if(secret[i]==guess[i]) A++;
        count1[secret[i] - '0']++;
    }
    for (i = 0; i<guess.size(); i++){
        count2[guess[i] - '0']++;
    }
    for(i=0;i<10;i++){
        while(count2[i]>0&&count1[i]>0){
            B++;
            count2[i]--;
            count1[i]--;
        }
    }
    return to_string(A) + "A" + to_string(B-A) + "B";
    }
};

/*
4ms 96.54%

思路：
分别一次遍历计算出同位相等的数字个数和各个数字的次数。再遍历算出相同数字的次数。

思考感悟：
1、首先计算位数相等的题常用的方法就是数组计数法，此题由于是数字而且是char型，能够更好利用此方法的优越性。
2、此题的难点在于重复数字的处理，分为两个数组计数能有效避免极端情况（0000和1111），从而将两者分开。
3、在计算某个数字多次出现但两边次数不同时，取最小值转化为用while递减的方法。
4、之前一直卡在字符串的强制类型转换，最后发现没有初始化AB的值，直接最后换成了C++。
*/
