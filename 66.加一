/*
给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。

 

示例 1：
输入：digits = [1,2,3]
输出：[1,2,4]
解释：输入数组表示数字 123。
*/
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
    int i=digits.size()-1;
    for(i;i>=0;i--){                  //从最后一位遍历是否有9
        if(digits[i]!=9){
            digits[i]++;        
            return digits;            //不是9，最末位加一后返回
        }
        digits[i]=0;                  //如果有9，则置为0
    }
    digits.insert(digits.begin(),1);  //全是9，在首位置入1
    return digits; 
    }
};

/*
4ms 67%

思路：
从末位遍历，最末位不是9则加一返回，是9则置零前移，全是9则首位插入1。

思考感悟：
1、此题的重点在于判断各种不同情况。
2、在直接扩展原来的数组方面，C++可以用内置函数直接扩展，C语言则较为麻烦。
3、0ms的示例和此题解只有判断9和10的区别，算法思路基本相同。
*/
