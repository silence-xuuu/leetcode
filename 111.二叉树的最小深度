/*
给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。
*/

/*
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==nullptr) return 0;
        if(root->left==nullptr) return minDepth(root->right)+1;
        if(root->right==nullptr) return minDepth(root->left)+1;
        return min(minDepth(root->left),minDepth(root->right))+1;
    }
};
*/

class Solution {
public:
    int depth = 1;
    int minDep = 100000;
    int minDepth(TreeNode* root) {
        if(root == NULL){
            return 0;
        }
        if(root->left == NULL){
            return 1+minDepth(root->right);
        }
        if(root->right == NULL){
            return 1+minDepth(root->left);
        }
        if(root->left !=NULL && root->right !=NULL){
            return 1+ min(minDepth(root -> left),minDepth(root -> right));
        }
        return 0;
    }
};

/*
292ms 95.85%

思路：递归。

思考感悟：
1、大体思路的递归思路和最大深度类似，不同的是左右子树为空时的判断。
2、在函数开始前定义最大深度可减少一定时间。

*/
