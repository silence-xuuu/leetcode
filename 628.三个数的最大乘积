/*
给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。

示例 1:
输入: [1,2,3]
输出: 6
*/

int maximumProduct(int* nums, int numsSize){
    long count,i,max1=LONG_MIN,max2=LONG_MIN,max3=LONG_MIN,min1=LONG_MAX,min2=LONG_MAX;
    for(i=0;i<numsSize;i++){
        if(nums[i]>=max1){
            max3=max2;
            max2=max1;
            max1=nums[i];
        }
        else if(nums[i]>=max2 && nums[i]<max1){
            max3=max2;
            max2=nums[i];
        }
        else if(nums[i]>=max3 && nums[i]<max2) max3=nums[i];
        if(nums[i]<=min1){
            min2=min1;
            min1=nums[i];
        }
        else if(nums[i]>min1 && nums[i]<=min2) min2=nums[i];
    }
    if(max1*max2*max3>max1*min1*min2) return max1*max2*max3;
    else return max1*min1*min2;
}

/*
44ms 97.06%

思路：
一次遍历找出最大三个值和最小负值，比较两种情况的大小。

思考感悟：
1、此处用到之前找第三大的数的方法引用LONG_MIN和LONG_MAX解决头几个数的大小关系问题。
2、使用迭代法减少时间避免超时和多次的重复计算。
3、还有一个重点在于两种不同情况的考虑，由题干可得输入范围包含有负数，需要特殊考虑。
*/
