/*
你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。
给定一个数字 n，找出可形成完整阶梯行的总行数。
n 是一个非负整数，并且在32位有符号整型的范围内。

n = 5
硬币可排列成以下几行:
¤
¤ ¤
¤ ¤
因为第三行不完整，所以返回2.
*/

int arrangeCoins(int n){
    return (int)((sqrt(8.0 * n + 1) - 1) / 2);
}

/*
4ms 91.47%
6.6mb 76%

思路：
用公式法计算直接得到通式。

思考感悟：
1.在写某些跟数学规律有关的题目时，往往会有简单的通式，如果在一定时间内想不出来的话直接写愚蠢的代码也是可以的，只是会在用时上有一定缺陷。
2.在遇到这类题目时，可以通过在自己能想到的范围内将特定的代码换成通式，从而加快程序运行的时间。
3.在此题的解决过程中，不考虑通式解法的话，第一种解法通过避免递归和额外数组存储，可以有效的减少时间和空间的占用，也是一种比较好的方法。
（由于开平方时会有小数的出现，所以在通式的使用中也要注意将开平方内的自然数换成float型从而避免误差）
*/
