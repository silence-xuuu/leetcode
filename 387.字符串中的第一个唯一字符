/*
给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。
*/

int firstUniqChar(char * s){
    int lenth=strlen(s),i=0;
    int abc[26]={0};
    for(i=0;i<lenth;i++){
        abc[s[i]-'a']++;
    }
    for(i=0;i<lenth;i++){
        if(abc[s[i]-'a']==1){
            return i;
        }
    }
    return -1;
}

/*
12ms 85.02%
8.2mb 82.92%

思路：
根据ASCII码的差值对一个长26的字符串中的元素做标记，两次循环得出第一个被标记为只有一次的数字。
*/

/*
int firstUniqChar(char * s){
    int i, j, flag;
    int words[26] = {0};
    flag = 0;
    if (s[0] == '\0') {
        return -1;
    }
    for (i = 0; s[i] != '\0'; i++) {
        if (words[s[i] - 'a'] != 1) {
            flag = 0;
            for (j = i + 1; s[j] != '\0'; j++) {
                if (s[i] == s[j]) {
                    flag = 1;
                    break;
                }
            }
            if (flag == 0) {
                return i;
            }
            words[s[i] - 'a'] = 1;
        }
    }
    return -1;
}

0ms 100%

思路：
同样创建长度为26的空数组，对每一个元素进行冒泡比较法，若有重复值则跳出循环，无重复值直接返回下标。

思考感悟：
1、字母出现次数的题目80%都离不开长度为26的空数组。
2、冒泡比较法因为直接弹出往往比全遍历两遍的速度更快。

*/
